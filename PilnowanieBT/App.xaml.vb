Imports System.Xml.Serialization
Imports Windows.Data.Xml.Dom
Imports Windows.Devices.Bluetooth.Advertisement
Imports Windows.Devices.Enumeration
Imports Windows.Devices.Radios
Imports Windows.Storage
Imports Windows.UI.Notifications
Imports Windows.UI.Popups
''' <summary>
''' Provides application-specific behavior to supplement the default Application class.
''' </summary>

<XmlType("item")>
Public Class Urzadzenie
    <XmlAttribute()>
    Public Property Nazwa As String
    <XmlAttribute()>
    Public Property Adres As String = ""

    ' musza byc ignore, bo jest property, a property musi byc, bo inaczej XAML tego nie widzi
    <XmlIgnore>
    Public Property Proto As String = ""
    <XmlIgnore>
    Public Property IkonkaRSSI As String = "ZeroBars"
    <XmlIgnore>
    Public Property Pilnowane As Boolean = False
    <XmlIgnore>
    Public Property KolorBg As String = "White"
    <XmlIgnore>
    Public Property KolorFg As String = "Black"

    ' pozostale, ktore nie sa uzywane przez UI
    Public Widziane As Boolean = False
    Public SortGrp As Integer = 1
    Public TimeStamp As DateTimeOffset
    Public SinceSeen As Integer = 0
    Public RSSIcurrent As Integer = 0
    Public RSSImin As Integer = 128    ' max raportowane: 127
    Public RSSImax As Integer = -129   ' min raportowane: -128
End Class


NotInheritable Class App
    Inherits Application

    'Shared moRootFrame As Frame
    Public Shared msImportBuffer As String = ""

#Region "AutoGenerated"

    ''' <summary>
    ''' Invoked when the application is launched normally by the end user.  Other entry points
    ''' will be used when the application is launched to open a specific file, to display
    ''' search results, and so forth.
    ''' </summary>
    ''' <param name="e">Details about the launch request and process.</param>
    Protected Overrides Sub OnLaunched(e As Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)
        Dim rootFrame As Frame = TryCast(Window.Current.Content, Frame)

        ' Do not repeat app initialization when the Window already has content,
        ' just ensure that the window is active

        If rootFrame Is Nothing Then
            ' Create a Frame to act as the navigation context and navigate to the first page
            rootFrame = New Frame()

            AddHandler rootFrame.NavigationFailed, AddressOf OnNavigationFailed

            If e.PreviousExecutionState = ApplicationExecutionState.Terminated Then
                ' TODO: Load state from previously suspended application
            End If
            ' Place the frame in the current Window
            Window.Current.Content = rootFrame
        End If

        'moRootFrame = rootFrame      ' PKAR DODATEK

        If e.PrelaunchActivated = False Then
            If rootFrame.Content Is Nothing Then
                ' When the navigation stack isn't restored navigate to the first page,
                ' configuring the new page by passing required information as a navigation
                ' parameter
                rootFrame.Navigate(GetType(MainPage), e.Arguments)
            End If

            ' Ensure the current window is active
            Window.Current.Activate()
        End If
    End Sub

    ''' <summary>
    ''' Invoked when Navigation to a certain page fails
    ''' </summary>
    ''' <param name="sender">The Frame which failed navigation</param>
    ''' <param name="e">Details about the navigation failure</param>
    Private Sub OnNavigationFailed(sender As Object, e As NavigationFailedEventArgs)
        Throw New Exception("Failed to load Page " + e.SourcePageType.FullName)
    End Sub

    ''' <summary>
    ''' Invoked when application execution is being suspended.  Application state is saved
    ''' without knowing whether the application will be terminated or resumed with the contents
    ''' of memory still intact.
    ''' </summary>
    ''' <param name="sender">The source of the suspend request.</param>
    ''' <param name="e">Details about the suspend request.</param>
    Private Sub OnSuspending(sender As Object, e As SuspendingEventArgs) Handles Me.Suspending
        Dim deferral As SuspendingDeferral = e.SuspendingOperation.GetDeferral()
        ' TODO: Save application state and stop any background activity
        deferral.Complete()
    End Sub
#End Region

#Region "moja biblioteka"

    Public Shared Function GetSettingsString(sName As String, Optional sDefault As String = "") As String
        Dim sTmp As String

        sTmp = sDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = ApplicationData.Current.RoamingSettings.Values(sName).ToString
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = ApplicationData.Current.LocalSettings.Values(sName).ToString
        End If

        Return sTmp

    End Function

    Public Shared Sub SetSettingsString(sName As String, sValue As String, Optional bRoam As Boolean = False)
        If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue
        ApplicationData.Current.LocalSettings.Values(sName) = sValue
    End Sub




    Public Shared Function GetSettingsInt(sName As String, Optional iDefault As Integer = 0) As Integer
        Dim sTmp As Integer

        sTmp = iDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = CInt(ApplicationData.Current.RoamingSettings.Values(sName).ToString)
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = CInt(ApplicationData.Current.LocalSettings.Values(sName).ToString)
        End If

        Return sTmp

    End Function

    Public Shared Sub SetSettingsInt(sName As String, sValue As Integer, Optional bRoam As Boolean = False)
        If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue.ToString
        ApplicationData.Current.LocalSettings.Values(sName) = sValue.ToString
    End Sub



    Public Shared Function GetSettingsBool(sName As String, Optional iDefault As Boolean = False) As Boolean
        Dim sTmp As Boolean

        sTmp = iDefault

        If ApplicationData.Current.RoamingSettings.Values.ContainsKey(sName) Then
            sTmp = CBool(ApplicationData.Current.RoamingSettings.Values(sName).ToString)
        End If
        If ApplicationData.Current.LocalSettings.Values.ContainsKey(sName) Then
            sTmp = CBool(ApplicationData.Current.LocalSettings.Values(sName).ToString)
        End If

        Return sTmp

    End Function

    Public Shared Sub SetSettingsBool(sName As String, sValue As Boolean, Optional bRoam As Boolean = False)
        If bRoam Then ApplicationData.Current.RoamingSettings.Values(sName) = sValue.ToString
        ApplicationData.Current.LocalSettings.Values(sName) = sValue.ToString
    End Sub

    Public Shared Sub SetBadgeNo(iInt As Integer)
        ' https://docs.microsoft.com/en-us/windows/uwp/controls-and-patterns/tiles-and-notifications-badges
        Dim oXmlBadge = BadgeUpdateManager.GetTemplateContent(BadgeTemplateType.BadgeNumber)
        Dim oXmlNum = CType(oXmlBadge.SelectSingleNode("/badge"), XmlElement)
        oXmlNum.SetAttribute("value", iInt.ToString)
        BadgeUpdateManager.CreateBadgeUpdaterForApplication().Update(New BadgeNotification(oXmlBadge))
    End Sub
    Public Shared Function XmlSafeString(sInput As String) As String
        Dim sTmp As String
        sTmp = sInput.Replace("&", "&amp;")
        sTmp = sTmp.Replace("<", "&lt;")
        sTmp = sTmp.Replace(">", "&gt;")
        Return sTmp
    End Function

    Public Shared Sub MakeToast(sMsg As String, Optional sMsg1 As String = "")
        Dim sXml = "<visual><binding template='ToastGeneric'><text>" & XmlSafeString(sMsg)
        If sMsg1 <> "" Then sXml = sXml & "</text><text>" & XmlSafeString(sMsg1)
        sXml = sXml & "</text></binding></visual>"
        Dim oXml = New XmlDocument
        oXml.LoadXml("<toast>" & sXml & "</toast>")
        Dim oToast = New ToastNotification(oXml)
        ToastNotificationManager.CreateToastNotifier().Show(oToast)
    End Sub

    Public Shared Function GetLangString(sMsg As String) As String
        Dim sRet = sMsg
        Try
            sRet = Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView().GetString(sMsg)
        Catch
        End Try
        Return sRet
    End Function

    Public Shared Sub DialogBoxRes(sMsg As String)
        DialogBoxRes(sMsg, "")
    End Sub

    Public Shared Sub DialogBoxRes(sMsg As String, sAddInfo As String)
        Dim sTxt = GetLangString(sMsg)
        If sAddInfo IsNot Nothing Then sTxt = sTxt & ":" & sAddInfo
        DialogBox(sTxt)
    End Sub
    Public Shared Async Sub DialogBox(sMsg As String)
        Dim oMsg As New MessageDialog(sMsg)
        Await oMsg.ShowAsync
    End Sub
    Public Shared Async Sub DialogBoxError(iNr As Integer, sMsg As String)
        Dim sTxt = Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView().GetString("errAnyError")
        sTxt = sTxt & " (" & iNr & ")" & vbCrLf & sMsg
        Dim oMsg As New MessageDialog(sTxt)
        Await oMsg.ShowAsync
    End Sub

    Public Shared Async Function DialogBoxResYN(sMsgResId As String, Optional sYesResId As String = "resDlgYes", Optional sNoResId As String = "resDlgNo") As Task(Of Boolean)
        Dim sMsg, sYes, sNo As String

        With Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()
            sMsg = .GetString(sMsgResId)
            sYes = .GetString(sYesResId)
            sNo = .GetString(sNoResId)
        End With

        Dim oMsg As New MessageDialog(sMsg)
        Dim oYes = New UICommand(sYes)
        Dim oNo = New UICommand(sNo)
        oMsg.Commands.Add(oYes)
        oMsg.Commands.Add(oNo)
        oMsg.DefaultCommandIndex = 1    ' default: No
        Dim oCmd = Await oMsg.ShowAsync
        If oCmd Is Nothing Then Return False
        If oCmd.Label = sYes Then Return True

        Return False

    End Function

    Public Shared Async Function DialogBoxInput(sMsgResId As String, Optional sDefaultResId As String = "", Optional sYesResId As String = "resDlgContinue", Optional sNoResId As String = "resDlgCancel") As Task(Of String)
        Dim sMsg, sYes, sNo, sDefault As String

        sDefault = ""

        With Windows.ApplicationModel.Resources.ResourceLoader.GetForCurrentView()
            sMsg = .GetString(sMsgResId)
            sYes = .GetString(sYesResId)
            sNo = .GetString(sNoResId)
            If sDefaultResId <> "" Then sDefault = .GetString(sDefaultResId)
        End With

        If sMsg = "" Then sMsg = sMsgResId  ' zabezpieczenie na brak string w resource
        If sYes = "" Then sYes = sYesResId
        If sNo = "" Then sNo = sNoResId
        If sDefault = "" Then sDefault = sDefaultResId

        Dim oInputTextBox = New TextBox
        oInputTextBox.AcceptsReturn = False
        oInputTextBox.Text = sDefault
        Dim oDlg As New ContentDialog
        oDlg.Content = oInputTextBox
        oDlg.PrimaryButtonText = sYes
        oDlg.SecondaryButtonText = sNo
        oDlg.Title = sMsg

        Dim oCmd = Await oDlg.ShowAsync
        If oCmd <> ContentDialogResult.Primary Then Return ""

        Return oInputTextBox.Text

    End Function

    Public Shared Function GetRoamingFolder(Optional bMsgErr As Boolean = False) As StorageFolder
        Dim oFold = Nothing
        Try
            oFold = Windows.Storage.ApplicationData.Current.LocalFolder '  .RoamingFolder
        Catch ex As Exception
        End Try

        If oFold Is Nothing Then
            DialogBoxRes("errNoRoamFolder")
            Return Nothing
        End If
        Return oFold
    End Function

    Public Shared Async Function GetRoamingFile(sName As String, bCreate As Boolean) As Task(Of StorageFile)
        Dim oFold = GetRoamingFolder(True)
        If oFold Is Nothing Then Return Nothing

        Dim bErr = False
        Dim oFile = Nothing
        Try
            If bCreate Then
                oFile = Await oFold.CreateFileAsync(sName, CreationCollisionOption.ReplaceExisting)
            Else
                oFile = Await oFold.GetFileAsync(sName)
            End If
        Catch ex As Exception
            bErr = True
        End Try
        If bErr Then
            Return Nothing
        End If

        Return oFile
    End Function

#End Region

    Public Shared moLista As ObservableCollection(Of Urzadzenie)
    Public Shared moDevWatcher As BluetoothLEAdvertisementWatcher ' DeviceWatcher

    Public Shared Sub ProbaDispatch()
        ' Dim oCos = TryCast(Window.Current.Content, Frame).Content
        Dim a = 1
    End Sub


    Public Shared Sub Zakoloruj(ByRef oItem As Urzadzenie)
        If oItem.Pilnowane Then
            If oItem.Widziane Then
                oItem.KolorBg = "White"
                oItem.KolorFg = "DarkGreen"
            Else
                oItem.KolorBg = "Yellow"
                oItem.KolorFg = "DarkRed"
            End If
        Else
            oItem.Pilnowane = False
            oItem.KolorBg = "White"
            oItem.KolorFg = "Gray"
        End If

        If Not oItem.Widziane Then
            oItem.IkonkaRSSI = "ZeroBars"
        Else
            oItem.IkonkaRSSI = "OneBar"
            If oItem.RSSIcurrent < -90 Then
                oItem.IkonkaRSSI = "OneBar"
            ElseIf oItem.RSSIcurrent < -60 Then
                oItem.IkonkaRSSI = "TwoBars"
            ElseIf oItem.RSSIcurrent < -30 Then
                oItem.IkonkaRSSI = "ThreeBars"
            Else
                oItem.IkonkaRSSI = "FourBars"
            End If
        End If
        ' FourBars OneBar ThreeBars TwoBars, ZeroBars; 0..-50, -50..-90, below

    End Sub

    Public Shared Async Function IsNetBTavailable(bMsg As Boolean) As Task(Of Boolean)

        ' sprawdzamy czy jest Bluetooth w ogole dostepny
        Dim bError = True
        Dim oRadios = Await Radio.GetRadiosAsync()
        For Each oRadio In oRadios
            If oRadio.Kind = RadioKind.Bluetooth Then
                bError = False
                Exit For
            End If
        Next

        If bError Then
            If bMsg Then App.DialogBoxRes("errBTnoAvail")
            Return False
        End If

        bError = True
        For Each oRadio In oRadios
            If oRadio.Kind = RadioKind.Bluetooth And oRadio.State = RadioState.On Then
                bError = False
                Exit For
            End If
        Next

        If bError Then
            If bMsg Then App.DialogBoxRes("errBTnotEnabled")
            Return False
        End If

        Return True

    End Function

End Class
